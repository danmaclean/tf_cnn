{
  "message": "ValueError: Error when checking target: expected dropout_2 to have shape (8,) but got array with shape (1,)\n\nDetailed traceback: \n  File \"/Users/macleand/.virtualenvs/r-tensorflow/lib/python2.7/site-packages/keras/engine/training.py\", line 955, in fit\n    batch_size=batch_size)\n  File \"/Users/macleand/.virtualenvs/r-tensorflow/lib/python2.7/site-packages/keras/engine/training.py\", line 792, in _standardize_user_data\n    exception_prefix='target')\n  File \"/Users/macleand/.virtualenvs/r-tensorflow/lib/python2.7/site-packages/keras/engine/training_utils.py\", line 136, in standardize_input_data\n    str(data_shape))\n",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) {\n        result <- py_to_r(result)\n        if (is.null(result)) \n            invisible(result)\n        else result\n    }\n    else {\n        result\n    }\n}, class = c(\"python.builtin.instancemethod\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = 512L, epochs = 30L, \n    verbose = 1L, callbacks = list(<environment>, <environment>, \n        <environment>), validation_split = 0, shuffle = TRUE, \n    class_weight = NULL, sample_weight = NULL, initial_epoch = 0L, \n    validation_data = list(<environment>, <environment>), x = <environment>, \n    y = <environment>)", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., x_train, y_train, epochs = FLAGS$epochs, \n    batch_size = FLAGS$batch_size, validation_data = list(x_val, \n        y_val), callbacks = callbacks_list)", "fit(., x_train, y_train, epochs = FLAGS$epochs, batch_size = FLAGS$batch_size, \n    validation_data = list(x_val, y_val), callbacks = callbacks_list)", "function_list[[k]](value)", "withVisible(function_list[[k]](value))", "freduce(value, `_function_list`)", "`_fseq`(`_lhs`)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))", "model %>% fit(x_train, y_train, epochs = FLAGS$epochs, batch_size = FLAGS$batch_size, \n    validation_data = list(x_val, y_val), callbacks = callbacks_list)", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "source(file = file, local = envir, echo = echo, encoding = encoding)", "withCallingHandlers({\n    source(file = file, local = envir, echo = echo, encoding = encoding)\n    write_run_property(\"completed\", TRUE)\n}, error = function(e) {\n    write_run_metadata(\"error\", list(message = e$message, traceback = capture_stacktrace(sys.calls())))\n    stop(e)\n})", "force(expr)", "with_changed_file_copy(getwd(), run_dir, {\n    write_run_property(\"script\", basename(file))\n    write_run_property(\"start\", as.double(Sys.time()))\n    on.exit(write_run_property(\"end\", as.double(Sys.time())), \n        add = TRUE)\n    on.exit(clear_run(), add = TRUE)\n    on.exit(reset_tf_graph(), add = TRUE)\n    old_width <- getOption(\"width\")\n    options(width = min(100, old_width))\n    on.exit(options(width = old_width), add = TRUE)\n    properties_dir <- file.path(meta_dir(run_dir), \"properties\")\n    output_file <- file(file.path(properties_dir, \"output\"), \n        open = \"wt\", encoding = \"UTF-8\")\n    sink(file = output_file, type = \"output\", split = TRUE)\n    on.exit({\n        sink(type = \"output\")\n        close(output_file)\n    }, add = TRUE)\n    plots_dir <- file.path(run_dir, \"plots\")\n    if (!utils::file_test(\"-d\", plots_dir)) \n        dir.create(plots_dir, recursive = TRUE)\n    png_args <- list(filename = file.path(plots_dir, \"Rplot%03d.png\"), \n        width = 1200, height = 715, res = 192)\n    if (is_windows() && capabilities(\"cairo\")) \n        png_args$type <- \"cairo\"\n    do.call(grDevices::png, png_args)\n    dev_number <- grDevices::dev.cur()\n    on.exit(grDevices::dev.off(dev_number), add = TRUE)\n    message(\"Using run directory \", run_dir)\n    write_run_property(\"completed\", FALSE)\n    withCallingHandlers({\n        source(file = file, local = envir, echo = echo, encoding = encoding)\n        write_run_property(\"completed\", TRUE)\n    }, error = function(e) {\n        write_run_metadata(\"error\", list(message = e$message, \n            traceback = capture_stacktrace(sys.calls())))\n        stop(e)\n    })\n})", "do_training_run(file, run_dir, echo = echo, envir = envir, encoding = encoding)", "training_run(file = file, config = config, flags = flags, properties = properties, \n    run_dir = NULL, echo = echo, view = FALSE, envir = new.env(parent = envir), \n    encoding = encoding)", "tuning_run(\"../scripts/tunable_model.R\", sample = 0.1, echo = FALSE, \n    flags = list(drop1 = c(0.01, 0.05), do_drop1 = c(TRUE, FALSE), \n        filter1 = c(8, 4), filter2 = c(8, 4), pool1 = c(2, 4), \n        nconvlayers = c(1, 2, 3), regularizer1 = c(\"regularizer_l1\", \n            \"regularizer_l2\"), regularizer2 = c(\"regularizer_l1\", \n            \"regularizer_l2\"), reg1_rate = c(0.1, 0.01), reg2_rate = c(0.1, \n            0.01), kernel1 = c(5, 7), kernel2 = c(5, 7), ndense = c(1, \n            2, 3, 4), regularizer_dense1 = c(\"regularizer_l1\", \n            \"regularizer_l2\"), regdense1_rate = c(0.1, 0.01), \n        hidden1 = c(8, 4), do_drop_dense1 = c(TRUE, FALSE), do_drop_dense2 = c(TRUE, \n            FALSE), hidden2 = c(8, 4, 2), epochs = c(30, 40), \n        batch_size = c(512), optimizer = c(\"adam\", \"rmsprop\"), \n        learn_rate = c(0.1, 0.001)))", "eval(expr, envir, enclos)", "eval(expr, envir, enclos)", "withVisible(eval(expr, envir, enclos))", "withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, \n    error = eHandler, message = mHandler)", "handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, \n    enclos)), warning = wHandler, error = eHandler, message = mHandler))", "timing_fn(handle(ev <- withCallingHandlers(withVisible(eval(expr, \n    envir, enclos)), warning = wHandler, error = eHandler, message = mHandler)))", "evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, \n    debug = debug, last = i == length(out), use_try = stop_on_error != \n        2L, keep_warning = keep_warning, keep_message = keep_message, \n    output_handler = output_handler, include_timing = include_timing)", "evaluate::evaluate(...)", "evaluate(code, envir = env, new_device = FALSE, keep_warning = !isFALSE(options$warning), \n    keep_message = !isFALSE(options$message), stop_on_error = if (options$error && \n        options$include) 0L else 2L, output_handler = knit_handlers(options$render, \n        options))", "in_dir(input_dir(), evaluate(code, envir = env, new_device = FALSE, \n    keep_warning = !isFALSE(options$warning), keep_message = !isFALSE(options$message), \n    stop_on_error = if (options$error && options$include) 0L else 2L, \n    output_handler = knit_handlers(options$render, options)))", "block_exec(params)", "rmarkdown::render(\"/Users/macleand/Desktop/tfs/analysis/0015_tuning_runs.Rmd\", \n    encoding = \"UTF-8\")"]
}
